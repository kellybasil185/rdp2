name: RDP Access via ngrok

on:
  push:
    branches:
      - main # Trigger on push to main branch (or your default branch)
  workflow_dispatch: # Allows manual trigger from the GitHub Actions UI

jobs:
  build:
    runs-on: windows-latest # Use the latest Windows runner
    timeout-minutes: 360 # Set a maximum duration for the job (e.g., 6 hours)
                         # The RDP session will be active for this duration.

    steps:
    - name: Download ngrok v3 stable
      # Downloads the latest stable ngrok v3 for Windows AMD64 from a direct distribution link.
      # This URL is more reliable for direct file download than the ngrok.com/download page.
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      # Extracts the downloaded ngrok zip file into a directory named 'ngrok'
      run: Expand-Archive ngrok.zip -DestinationPath ngrok -Force

    - name: Authenticate ngrok
      # Authenticates ngrok using the NGROK_AUTH_TOKEN secret
      # Make sure you have this secret configured in your repository settings
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop and Firewall Rules
      # Configures the Windows system to allow Remote Desktop connections
      run: |
        # Set fDenyTSConnections to 0 to enable RDP connections
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        # Enable the built-in Remote Desktop firewall rule
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        # Set UserAuthentication to 1 for standard user authentication (Network Level Authentication - NLA)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Create RDP User and Add to Administrators
      # Ensures the 'runneradmin' user exists and is in the Administrators group.
      # It first attempts to delete the user (ignoring errors if the user doesn't exist),
      # then creates the user, and finally adds them to the Administrators group.
      run: |
        # Attempt to delete the user first to ensure a clean state.
        # '2>$null' redirects stderr to null, suppressing "user not found" errors.
        net user runneradmin /delete 2>$null

        # Create the user with the specified password
        net user runneradmin P@ssw0rd! /add

        # Add the user to the Administrators group
        net localgroup administrators runneradmin /add
